dados <- Acoustic.Features

library(car)
library(CCA)
library(klaR)
library(caret)
library(MASS)
library(psych)
library(AppliedPredictiveModeling)
library(plyr)
library(MVTests)
library(MVN)
library(tidyverse)

View(dados)
str(dados)

resumo = summary(dados)
resumo

n = nrow(dados)
n

table(dados$Class)
prop.table(table(dados$Class))

??MVN
mvn(dados[,-1], mvnTest = "hz")

help(parcoord)
parcoord(dados[,-1])
parcoord(dados[,-1], col = as.numeric(dados[,1]))

plot(dados[,-1], layout = c(4,1))

help(pairs.panels)

pairs.panels(dados[,-1],gap = 0, method = "pearson")
pairs.panels(dados[,-1], gap = 0, method = "spearman")

pairs.panels(dados, gap = 0, method = "pearson")

transparentTheme(trans = .9)
featurePlot(x = dados[,2:50],
            y= dados$Class,
            plot = "density",
            scales = list(x = list(relation = "free"),
                          y = list(relation = "free")),
            adjust = 1.5, pch ="|",
            layout = c(4,1),
            auto.key = list(columns= 3))


set.seed(1234)
ind = sample(2,n, replace = TRUE, prob = c(0.7,0.3))
treino = dados[ind==1,]
teste = dados[ind==2,]

pairs.panels(treino[,-1], gap = 0, method = "pearson", bg= c("red","yellow", "blue")[treino$Class],pch = 21)
table(treino$Class)
prop.table(table(treino$Class))
summary(treino)

pairs.panels(teste[,-1], gap = 0, method = "pearson", bg= c("red","yellow", "blue")[teste$Class],pch = 21)
table(teste$Class)
prop.table(table(teste$Class))
summary(teste)

result.lda <- lda(treino$Species ~ ., treino[,2:50],prior = c(1,1,1,1)/4, CV = FALSE)
result.lda

attributes(result.lda)

result.lda$svd

pred.treino <- predict(result.lda, treino)$class
pred.treino

y <- predict(result.lda, treino)$x
y

tc <- table(treino$Species, pred.treino)
tc

APER.treino <- (sum(tc)-sum(diag(tc)))/sum(tc)
100*APER.treino
100- 100*APER.treino

pred.teste <- predict(result.lda,teste)$class
pred.teste

y.teste <- predict(result.lda,teste)$x
y.teste

tc.teste <-table(teste$Species, pred.teste)
tc.teste

APER.teste <- (sum(tc.teste)-sum(diag(tc.teste)))/sum(tc.teste)
100*APER.teste
100- 100*APER.teste

cmteste = confusionMatrix(pred.teste, teste$Species)
cmteste

cmteste$byClass
cmteste$overall

pred.treino = ucpm(predict(lda(treino$Species ~ ., treino, prior = c(1,1,1)/3, CV = FALSE))$posterior, treino$Species)
pred.treino

treino.d <- treino[,1:4]
treino.c <- treino[,5]
step.lda <- stepclass(treino.d, treino.c,"lda", start.vars = "Sepal.Length",criterion = "As")
step.lda
plot(step.lda)

teste.d <- teste[,1:4]
teste.c <- teste[,5]
step2.lda <- stepclass(teste.d, teste.c,"lda", start.vars = "Sepal.Length",criterion = "As")
step2.lda
plot(step2.lda)

treino.d <- treino[,1:4]
treino.c <- treino[,5]
step.lda <- stepclass(treino.d, treino.c,"lda",direction = "both", criterion = "AS")
step.lda
plot(step.lda)

teste.d <- teste[,1:4]
teste.c <- teste[,5]
step2.lda <- stepclass(teste.d, teste.c,"lda",direction = "both",criterion = "AS")
step2.lda
plot(step2.lda)

modelo.lda = lda(treino$Species ~ Sepal.Length + Petal.Width, treino)
modelo.lda

pred.teste <- predict(object = modelo.lda, newdata = teste)
pred.teste


cmlinear = confusionMatrix(pred.teste$class, teste$Species)
cmlinear

cmlinear$byClass
cmlinear$overall

modelo2.lda = lda(treino$Species ~  Petal.Width, treino)
modelo2.lda

pred2.teste <- predict(object = modelo2.lda, newdata = teste)
pred2.teste


cmlinear2 = confusionMatrix(pred2.teste$class, teste$Species)
cmlinear2

cmlinear2$byClass
cmlinear2$overall

modelo3.lda = lda(treino$Species ~  Sepal.Width + Petal.Width, treino)
modelo3.lda
pred3.teste <- predict(object = modelo3.lda, newdata = teste)
pred3.teste


cmlinear3 = confusionMatrix(pred3.teste$class, teste$Species)
cmlinear3

cmlinear3$byClass
cmlinear3$overall

Summary(treino.d)
summary(treino.c)

mvn(treino.d,subset = treino.c, univariatePlot = "box")
mvn(treino.d, univariatePlot = "qqplot")
mvn(treino.d, univariatePlot = "histogram")

mvar.setosa = cov(treino[treino$Species == "setosa",1:4])
mvar.setosa

mvar.versicolor = cov(treino[treino$Species == "versicolor",1:4])
mvar.versicolor

mvar.virginica = cov(treino[treino$Species == "virginica",1:4])
mvar.virginica


testeigualvar <- BoxM(data = treino.d, group = treino.c)
summary(testeigualvar)

pred.treino.qda = ucpm(predict(qda(treino$Species ~ .,
                                   treino, prior = c(1,1,1)/3
                                   , CV= FALSE))$posterior,
                       treino$Species)
pred.treino.qda

step.qda <- stepclass(treino.d,treino.c, "qda", direction = "both", criterion = "AS")
step.qda
plot(step.qda)

modelo.qda = qda(treino$Species ~ Petal.Width, treino)
modelo.qda
modelo.qda$scaling

pred.treino.qda <- predict(object = modelo.qda, newdata = teste)
pred.treino.qda$class
pred.treino.qda$posterior

pred.treino.qda$posterior %>% round(4)

cmquad = confusionMatrix(pred.treino.qda$class, teste$Species)
cmquad
cmquad$byClass
cmquad$overall

step.rda <- stepclass(treino.d,treino.c, "rda", prior = c(1,1,1)/3
                      , CV= FALSE
                      ,direction = "both"
                      ,criterion = "AS")
step.rda
plot(step.rda)

modelo.rda = rda(treino$Species ~ Petal.Width, prior = c(1,1,1)/3
                 , CV= FALSE,treino)
modelo.rda
modelo.rda$scaling

pred.treino.rda <- predict(object = modelo.rda, newdata = teste)
pred.treino.rda$class
pred.treino.rda$posterior

pred.treino.rda$posterior %>% round(4)

cmrda = confusionMatrix(pred.treino.rda$class, teste$Species)
cmrda
cmrda$byClass
cmrda$overall
